/*
 * PLEASE DO NOT EDIT!
 *
 * Generated by SwagGen with Kotlin template.
 * https://github.com/pace/SwagGen
 */

package cloud.pace.sdk.api.pay.generated.model

import com.google.gson.annotations.SerializedName
import com.squareup.moshi.Json
import moe.banana.jsonapi2.HasMany
import moe.banana.jsonapi2.HasOne
import moe.banana.jsonapi2.JsonApi
import moe.banana.jsonapi2.Resource
import java.util.*

@JsonApi(type = "paymentMethod")
class PaymentMethod : Resource() {

    var links: Links? = null
    var meta: Meta? = null

    /* Customer chosen alias for the payment method */
    var alias: String? = null
    /* URL for the user to call in order to approve this payment method. */
    var approvalURL: String? = null
    var identificationString: String? = null
    /* Implicit (`true`) payment methods are read-only and cannot be deleted, e.g., ApplePay */
    var implicit: Boolean? = null
    var kind: Kind? = null
    /* indicates if the payment method kind requires two factors later on */
    var twoFactor: Boolean? = null
    /* PACE resource name(s) to payment method vendor */
    var vendorPRN: String? = null

    enum class Kind(val value: String) {
        @SerializedName("sepa")
        @Json(name = "sepa")
        SEPA("sepa"),
        @SerializedName("creditcard")
        @Json(name = "creditcard")
        CREDITCARD("creditcard"),
        @SerializedName("paypal")
        @Json(name = "paypal")
        PAYPAL("paypal"),
        @SerializedName("paydirekt")
        @Json(name = "paydirekt")
        PAYDIREKT("paydirekt"),
        @SerializedName("dkv")
        @Json(name = "dkv")
        DKV("dkv"),
        @SerializedName("hoyer")
        @Json(name = "hoyer")
        HOYER("hoyer"),
        @SerializedName("applepay")
        @Json(name = "applepay")
        APPLEPAY("applepay")
    }

    private var paymentTokens: HasMany<PaymentTokensRelationship> = HasMany()
    fun getPaymentTokens() = paymentTokens.get(document)


    class Links {

        var authorize: Authorize? = null

        class Authorize {

            var href: String? = null
            var meta: Meta? = null

            class Meta {

                var authFlow: AuthFlow? = null

                enum class AuthFlow(val value: String) {
                    @SerializedName("token-provided")
                    @Json(name = "token-provided")
                    TOKENPROVIDED("token-provided"),
                    @SerializedName("method-onboarded")
                    @Json(name = "method-onboarded")
                    METHODONBOARDED("method-onboarded")
                }
            }
        }
    }

    class Meta {

        /* Merchant name if the request was made in a way that a merchant name can be determined. For example if requesting payment methods for a specific gas station, it is the merchant name at that gas station. */
        var merchantName: String? = null
    }

}
