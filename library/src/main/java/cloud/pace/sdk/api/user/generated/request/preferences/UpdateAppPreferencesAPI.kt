/*
 * PLEASE DO NOT EDIT!
 *
 * Generated by SwagGen with Kotlin template.
 * https://github.com/pace/SwagGen
 */

package cloud.pace.sdk.api.user.generated.request.preferences

import cloud.pace.sdk.api.user.UserAPI
import cloud.pace.sdk.api.user.generated.model.*
import cloud.pace.sdk.api.utils.EnumConverterFactory
import cloud.pace.sdk.api.utils.InterceptorUtils
import cloud.pace.sdk.utils.toIso8601
import com.google.gson.annotations.SerializedName
import com.squareup.moshi.Json
import com.squareup.moshi.Moshi
import com.squareup.moshi.adapters.Rfc3339DateJsonAdapter
import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory
import moe.banana.jsonapi2.JsonApi
import moe.banana.jsonapi2.JsonApiConverterFactory
import moe.banana.jsonapi2.Resource
import moe.banana.jsonapi2.ResourceAdapterFactory
import okhttp3.OkHttpClient
import retrofit2.Call
import retrofit2.Retrofit
import retrofit2.converter.moshi.MoshiConverterFactory
import retrofit2.http.*
import java.io.File
import java.util.*
import java.util.concurrent.TimeUnit

object UpdateAppPreferencesAPI {

    interface UpdateAppPreferencesService {
        /* Update the users app preferences */
        /* Updates the apps preferences for the user identified by the given token.
The preferences may only be updated if the client has the respective scope
or is identified by the `clientId`. In order words all clients have their own
preferences namespace, only with the respective scope e.g. `user:preferences:read:xyz`
a client might be able to read the preferences of a different client.
The preferences should not have more than 10 key-value pairs per app.
Any key must not be longer than 128 bytes and any
value not longer than 255 bytes (including complex json objects).
 */
        @JvmSuppressWildcards
        @PUT("preferences/{clientId}")
        fun updateAppPreferences(
            @Path("clientId") clientId: String? = null,
            @retrofit2.http.Body body: Map<String, Any>
        ): Call<Void>
    }

    fun UserAPI.PreferencesAPI.updateAppPreferences(clientId: String? = null, body: Map<String, Any>, readTimeout: Long? = null): Call<Void> {
        val client = OkHttpClient.Builder()
                        .addNetworkInterceptor(InterceptorUtils.getInterceptor("application/json", "application/json", true))
                        .authenticator(InterceptorUtils.getAuthenticator())

        if (readTimeout != null) {
            client.readTimeout(readTimeout, TimeUnit.SECONDS)
        }

        val service: UpdateAppPreferencesService =
            Retrofit.Builder()
                .client(client.build())
                .baseUrl(UserAPI.baseUrl)
                .addConverterFactory(EnumConverterFactory())
                .addConverterFactory(
                    JsonApiConverterFactory.create(
                        Moshi.Builder()
                            .add(ResourceAdapterFactory.builder()
                                .build()
                            )
                            .add(Date::class.java, Rfc3339DateJsonAdapter().nullSafe())
                            .add(KotlinJsonAdapterFactory())
                            .build()
                    )
                )
                .addConverterFactory(
                    MoshiConverterFactory.create(
                        Moshi.Builder()
                            .add(Date::class.java, Rfc3339DateJsonAdapter().nullSafe())
                            .add(KotlinJsonAdapterFactory())
                            .build()
                    )
                )
                .build()
                .create(UpdateAppPreferencesService::class.java)

        return service.updateAppPreferences(clientId, body)
    }
}
