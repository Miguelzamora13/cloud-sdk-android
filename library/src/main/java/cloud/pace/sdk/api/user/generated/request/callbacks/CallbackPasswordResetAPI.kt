/*
 * PLEASE DO NOT EDIT!
 *
 * Generated by SwagGen with Kotlin template.
 * https://github.com/pace/SwagGen
 */

package cloud.pace.sdk.api.user.generated.request.callbacks

import cloud.pace.sdk.api.user.UserAPI
import cloud.pace.sdk.api.user.generated.model.*
import cloud.pace.sdk.api.utils.EnumConverterFactory
import cloud.pace.sdk.api.utils.InterceptorUtils
import cloud.pace.sdk.utils.toIso8601
import com.google.gson.annotations.SerializedName
import com.squareup.moshi.Json
import com.squareup.moshi.Moshi
import com.squareup.moshi.adapters.Rfc3339DateJsonAdapter
import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory
import moe.banana.jsonapi2.JsonApi
import moe.banana.jsonapi2.JsonApiConverterFactory
import moe.banana.jsonapi2.Resource
import moe.banana.jsonapi2.ResourceAdapterFactory
import okhttp3.OkHttpClient
import retrofit2.Call
import retrofit2.Retrofit
import retrofit2.converter.moshi.MoshiConverterFactory
import retrofit2.http.*
import java.io.File
import java.util.*
import java.util.concurrent.TimeUnit

object CallbackPasswordResetAPI {

    interface CallbackPasswordResetService {
        /* Password reset */
        /* During a password reset the user is only able to provide the HAVE
using the email address. In order to retain the user data the user
has to provide a second factor, either HAVE or KNOW.
The `prove` can be done with *PIN* (KNOW) or the *device OTP* (HAVE).
This callback is called before the password of the user is reset.
If the user is able to provide his/her `prove` correctly the data of
the user remain untouched. In case the `prove` is in correctly provided
for more than 3 times, the critical data e.g. payment data of the
user is deleted in order to prevent theft.
* `404` is returned in case the user has no `prove` defined.
* `410` is returned in case the `prove` didn't match multiple times,
  the user data will be deleted for safety reasons.
* `422` is returned in case the the `prove` is incorrect.
 */
        @POST("callbacks/password-reset")
        fun callbackPasswordReset(
            @retrofit2.http.Body body: Body
        ): Call<Void>
    }

    /* During a password reset the user is only able to provide the HAVE
    using the email address. In order to retain the user data the user
    has to provide a second factor, either HAVE or KNOW.
    The `prove` can be done with *PIN* (KNOW) or the *device OTP* (HAVE).
    This callback is called before the password of the user is reset.
    If the user is able to provide his/her `prove` correctly the data of
    the user remain untouched. In case the `prove` is in correctly provided
    for more than 3 times, the critical data e.g. payment data of the
    user is deleted in order to prevent theft.
    * `404` is returned in case the user has no `prove` defined.
    * `410` is returned in case the `prove` didn't match multiple times,
      the user data will be deleted for safety reasons.
    * `422` is returned in case the the `prove` is incorrect.
     */
    class Body {

        var data: UserPINBody? = null
    }

    fun UserAPI.CallbacksAPI.callbackPasswordReset(body: Body, readTimeout: Long? = null): Call<Void> {
        val client = OkHttpClient.Builder()
                        .addNetworkInterceptor(InterceptorUtils.getInterceptor("application/vnd.api+json", "application/vnd.api+json", true))
                        .authenticator(InterceptorUtils.getAuthenticator())

        if (readTimeout != null) {
            client.readTimeout(readTimeout, TimeUnit.SECONDS)
        }

        val service: CallbackPasswordResetService =
            Retrofit.Builder()
                .client(client.build())
                .baseUrl(UserAPI.baseUrl)
                .addConverterFactory(EnumConverterFactory())
                .addConverterFactory(
                    JsonApiConverterFactory.create(
                        Moshi.Builder()
                            .add(ResourceAdapterFactory.builder()
                                .build()
                            )
                            .add(Date::class.java, Rfc3339DateJsonAdapter().nullSafe())
                            .add(KotlinJsonAdapterFactory())
                            .build()
                    )
                )
                .addConverterFactory(
                    MoshiConverterFactory.create(
                        Moshi.Builder()
                            .add(Date::class.java, Rfc3339DateJsonAdapter().nullSafe())
                            .add(KotlinJsonAdapterFactory())
                            .build()
                    )
                )
                .build()
                .create(CallbackPasswordResetService::class.java)

        return service.callbackPasswordReset(body)
    }
}
