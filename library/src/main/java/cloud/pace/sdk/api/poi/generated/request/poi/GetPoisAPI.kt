/*
 * PLEASE DO NOT EDIT!
 *
 * Generated by SwagGen with Kotlin template.
 * https://github.com/pace/SwagGen
 */

package cloud.pace.sdk.api.poi.generated.request.poi

import cloud.pace.sdk.api.poi.POIAPI
import cloud.pace.sdk.api.poi.generated.model.*
import cloud.pace.sdk.api.utils.EnumConverterFactory
import cloud.pace.sdk.api.utils.InterceptorUtils
import cloud.pace.sdk.utils.toIso8601
import com.google.gson.annotations.SerializedName
import com.squareup.moshi.Json
import com.squareup.moshi.Moshi
import com.squareup.moshi.adapters.Rfc3339DateJsonAdapter
import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory
import moe.banana.jsonapi2.JsonApi
import moe.banana.jsonapi2.JsonApiConverterFactory
import moe.banana.jsonapi2.Resource
import moe.banana.jsonapi2.ResourceAdapterFactory
import okhttp3.OkHttpClient
import retrofit2.Call
import retrofit2.Retrofit
import retrofit2.converter.moshi.MoshiConverterFactory
import retrofit2.http.*
import java.io.File
import java.util.*
import java.util.concurrent.TimeUnit

object GetPoisAPI {

    interface GetPoisService {
        /* Returns a paginated list of POIs */
        /* Returns a paginated list of POIs optionally filtered by type, appId and/or query */
        @GET("pois")
        fun getPois(
            /* page number */
            @Query("page[number]") pagenumber: Int? = null,
            /* items per page */
            @Query("page[size]") pagesize: Int? = null,
            /* Filter for poi type, no filter returns all types */
            @Query("filter[poiType]") filterpoiType: POIType? = null,
            /* Filter id for app id, no filter returns pois for all apps */
            @Query("filter[appId]") filterappId: String? = null
        ): Call<POIs>
    }

    fun POIAPI.POIAPI.getPois(pagenumber: Int? = null, pagesize: Int? = null, filterpoiType: POIType? = null, filterappId: String? = null, readTimeout: Long? = null): Call<POIs> {
        val service: GetPoisService =
            Retrofit.Builder()
                .client(OkHttpClient.Builder()
                    .addNetworkInterceptor(InterceptorUtils.getInterceptor("application/json", "application/json", true))
                    .authenticator(InterceptorUtils.getAuthenticator())
                    .readTimeout(readTimeout ?: 10L, TimeUnit.SECONDS)
                    .build()
                )
                .baseUrl(POIAPI.baseUrl)
                .addConverterFactory(EnumConverterFactory())
                .addConverterFactory(
                    JsonApiConverterFactory.create(
                        Moshi.Builder()
                            .add(ResourceAdapterFactory.builder()
                                .add(ReferenceStatus::class.java)
                                .build()
                            )
                            .add(Date::class.java, Rfc3339DateJsonAdapter().nullSafe())
                            .add(KotlinJsonAdapterFactory())
                            .build()
                    )
                )
                .addConverterFactory(
                    MoshiConverterFactory.create(
                        Moshi.Builder()
                            .add(Date::class.java, Rfc3339DateJsonAdapter().nullSafe())
                            .add(KotlinJsonAdapterFactory())
                            .build()
                    )
                )
                .build()
                .create(GetPoisService::class.java)    

        return service.getPois(pagenumber, pagesize, filterpoiType, filterappId)
    }
}
