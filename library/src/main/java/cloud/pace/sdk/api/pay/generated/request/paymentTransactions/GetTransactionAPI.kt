/*
 * PLEASE DO NOT EDIT!
 *
 * Generated by SwagGen with Kotlin template.
 * https://github.com/pace/SwagGen
 */

package cloud.pace.sdk.api.pay.generated.request.paymentTransactions

import cloud.pace.sdk.api.pay.PayAPI
import cloud.pace.sdk.api.pay.generated.model.Transaction
import cloud.pace.sdk.api.utils.EnumConverterFactory
import cloud.pace.sdk.api.utils.InterceptorUtils
import com.google.gson.annotations.SerializedName
import com.squareup.moshi.Json
import com.squareup.moshi.Moshi
import com.squareup.moshi.adapters.Rfc3339DateJsonAdapter
import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory
import moe.banana.jsonapi2.JsonApiConverterFactory
import moe.banana.jsonapi2.ResourceAdapterFactory
import okhttp3.OkHttpClient
import retrofit2.Call
import retrofit2.Retrofit
import retrofit2.converter.moshi.MoshiConverterFactory
import retrofit2.http.GET
import retrofit2.http.HeaderMap
import retrofit2.http.Path
import retrofit2.http.Query
import java.util.Date
import java.util.concurrent.TimeUnit

object GetTransactionAPI {

    interface GetTransactionService {
        /* Get a transaction */
        /* Endpoint for fetching information about a single transaction. Only completed transactions can be returned.
If `update=longPolling` is set, the following applies:
In case the transaction is not yet completed the call may be delayed 20s until a response can be given. If the client got this URL as a response to the Pre Auth process the call is save to retry. In case the transaction was canceled by the client an answer will still be delayed but always returns `404`, therefore the client has to remember, that the transaction was canceled.
 */
        @GET("transactions/{transactionId}")
        fun getTransaction(
            @HeaderMap headers: Map<String, String>,
            /* transaction ID. */
            @Path("transactionId") transactionId: String,
            /* Specify this parameter if you want to enable long-polling on this endpoint. Long-polling means that the endpoint will wait a fixed set of seconds (20s)
before returning the result.
 */
            @Query("update") update: Update? = null
        ): Call<Transaction>
    }

    /* Specify this parameter if you want to enable long-polling on this endpoint. Long-polling means that the endpoint will wait a fixed set of seconds (20s)
    before returning the result.
     */
    enum class Update(val value: String) {
        @SerializedName("longPolling")
        @Json(name = "longPolling")
        LONGPOLLING("longPolling")
    }

    fun PayAPI.PaymentTransactionsAPI.getTransaction(
        transactionId: String,
        update: Update? = null,
        readTimeout: Long? = null,
        additionalHeaders: Map<String, String>? = null,
        additionalParameters: Map<String, String>? = null
    ): Call<Transaction> {
        val client = OkHttpClient.Builder().addInterceptor(InterceptorUtils.getInterceptor(additionalParameters))
        val headers = InterceptorUtils.getHeaders(true, "application/vnd.api+json", "application/vnd.api+json", additionalHeaders)

        if (readTimeout != null) {
            client.readTimeout(readTimeout, TimeUnit.SECONDS)
        }

        val service: GetTransactionService =
            Retrofit.Builder()
                .client(client.build())
                .baseUrl(PayAPI.baseUrl)
                .addConverterFactory(EnumConverterFactory())
                .addConverterFactory(
                    JsonApiConverterFactory.create(
                        Moshi.Builder()
                            .add(
                                ResourceAdapterFactory.builder()
                                    .build()
                            )
                            .add(Date::class.java, Rfc3339DateJsonAdapter().nullSafe())
                            .add(KotlinJsonAdapterFactory())
                            .build()
                    )
                )
                .addConverterFactory(
                    MoshiConverterFactory.create(
                        Moshi.Builder()
                            .add(Date::class.java, Rfc3339DateJsonAdapter().nullSafe())
                            .add(KotlinJsonAdapterFactory())
                            .build()
                    )
                )
                .build()
                .create(GetTransactionService::class.java)

        return service.getTransaction(
            headers,
            transactionId,
            update
        )
    }
}
