/*
 * PLEASE DO NOT EDIT!
 *
 * Generated by SwagGen with Kotlin template.
 * https://github.com/pace/SwagGen
 */

package cloud.pace.sdk.api.fueling.generated.request.fueling

import cloud.pace.sdk.api.fueling.FuelingAPI
import cloud.pace.sdk.api.fueling.generated.model.*
import cloud.pace.sdk.api.utils.EnumConverterFactory
import cloud.pace.sdk.api.utils.InterceptorUtils
import cloud.pace.sdk.utils.toIso8601
import com.google.gson.annotations.SerializedName
import com.squareup.moshi.Json
import com.squareup.moshi.Moshi
import com.squareup.moshi.adapters.Rfc3339DateJsonAdapter
import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory
import moe.banana.jsonapi2.JsonApi
import moe.banana.jsonapi2.JsonApiConverterFactory
import moe.banana.jsonapi2.Resource
import moe.banana.jsonapi2.ResourceAdapterFactory
import okhttp3.OkHttpClient
import okhttp3.ResponseBody
import retrofit2.Call
import retrofit2.Retrofit
import retrofit2.converter.moshi.MoshiConverterFactory
import retrofit2.http.*
import java.io.File
import java.util.*
import java.util.concurrent.TimeUnit

object WaitOnPumpStatusChangeAPI {

    interface WaitOnPumpStatusChangeService {
        /* Wait for a status change on a given pump */
        /* Uses **long polling** to wait for a status change on a given pump. Returns as soon as the status has changed or after the number of seconds provided by the optional `timeout` query parameter (default timeout is 30 seconds). In case of timeout (408 status code) you're safe to start the request again. Instantaneously returns if `lastStatus` was given and already changed between request. If successful, it returns the same structure as the normal status call
<br><br>
Only use after approaching, otherwise returns `403 Forbidden`.
 */
        @GET("gas-stations/{gasStationId}/pumps/{pumpId}/wait-for-status-change")
        fun waitOnPumpStatusChange(
            @HeaderMap headers: Map<String, String>,
            /* Gas station ID */
            @Path("gasStationId") gasStationId: String,
            /* Pump ID */
            @Path("pumpId") pumpId: String,
            /* Use **long polling** for status updates */
            @Query("update") update: Update? = null,
            /* Pump status */
            @Query("lastStatus") lastStatus: LastStatus? = null,
            /* Timeout in seconds */
            @Query("timeout") timeout: Int? = null
        ): Call<PumpResponse>
    }

    /* Use **long polling** for status updates */
    enum class Update(val value: String) {
        @SerializedName("longPolling")
        @Json(name = "longPolling")
        LONGPOLLING("longPolling")
    }

    /* Pump status */
    enum class LastStatus(val value: String) {
        @SerializedName("free")
        @Json(name = "free")
        FREE("free"),
        @SerializedName("inUse")
        @Json(name = "inUse")
        INUSE("inUse"),
        @SerializedName("readyToPay")
        @Json(name = "readyToPay")
        READYTOPAY("readyToPay"),
        @SerializedName("locked")
        @Json(name = "locked")
        LOCKED("locked"),
        @SerializedName("inTransaction")
        @Json(name = "inTransaction")
        INTRANSACTION("inTransaction"),
        @SerializedName("outOfOrder")
        @Json(name = "outOfOrder")
        OUTOFORDER("outOfOrder")
    }

    fun FuelingAPI.FuelingAPI.waitOnPumpStatusChange(gasStationId: String, pumpId: String, update: Update? = null, lastStatus: LastStatus? = null, timeout: Int? = null, readTimeout: Long? = null, additionalHeaders: Map<String, String>? = null, additionalParameters: Map<String, String>? = null): Call<PumpResponse> {
        val client = OkHttpClient.Builder().addInterceptor(InterceptorUtils.getInterceptor(additionalParameters))
        val headers = InterceptorUtils.getHeaders(true, "application/vnd.api+json", "application/vnd.api+json", additionalHeaders)

        if (readTimeout != null) {
            client.readTimeout(readTimeout, TimeUnit.SECONDS)
        }

        val service: WaitOnPumpStatusChangeService =
            Retrofit.Builder()
                .client(client.build())
                .baseUrl(FuelingAPI.baseUrl)
                .addConverterFactory(EnumConverterFactory())
                .addConverterFactory(
                    JsonApiConverterFactory.create(
                        Moshi.Builder()
                            .add(ResourceAdapterFactory.builder()
                                .build()
                            )
                            .add(Date::class.java, Rfc3339DateJsonAdapter().nullSafe())
                            .add(KotlinJsonAdapterFactory())
                            .build()
                    )
                )
                .addConverterFactory(
                    MoshiConverterFactory.create(
                        Moshi.Builder()
                            .add(Date::class.java, Rfc3339DateJsonAdapter().nullSafe())
                            .add(KotlinJsonAdapterFactory())
                            .build()
                    )
                )
                .build()
                .create(WaitOnPumpStatusChangeService::class.java)

        return service.waitOnPumpStatusChange(headers, gasStationId, pumpId, update, lastStatus, timeout)
    }
}
