/*
 * PLEASE DO NOT EDIT!
 *
 * Generated by SwagGen with Kotlin template.
 * https://github.com/pace/SwagGen
 */

package cloud.pace.sdk.api.poi.generated.request.apps

import cloud.pace.sdk.api.poi.POIAPI
import cloud.pace.sdk.api.poi.generated.model.*
import cloud.pace.sdk.api.utils.EnumConverterFactory
import cloud.pace.sdk.api.utils.InterceptorUtils
import cloud.pace.sdk.utils.toIso8601
import com.google.gson.annotations.SerializedName
import com.squareup.moshi.Json
import com.squareup.moshi.Moshi
import com.squareup.moshi.adapters.Rfc3339DateJsonAdapter
import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory
import moe.banana.jsonapi2.JsonApi
import moe.banana.jsonapi2.JsonApiConverterFactory
import moe.banana.jsonapi2.Resource
import moe.banana.jsonapi2.ResourceAdapterFactory
import okhttp3.OkHttpClient
import retrofit2.Call
import retrofit2.Retrofit
import retrofit2.converter.moshi.MoshiConverterFactory
import retrofit2.http.*
import java.io.File
import java.util.*
import java.util.concurrent.TimeUnit

object CheckForPaceAppAPI {

    interface CheckForPaceAppService {
        /* Query for location-based apps
 */
        /* These location-based PACE apps deliver additional services for PACE customers based on their current position.
You can (or should) trigger this whenever:
* A longer stand-still is detected
* The engine is turned off
* Every 5 seconds if the user "left the road"
Please note that calling this API is very cheap and can be done regularly.
 */
        @GET("apps/query")
        fun checkForPaceApp(
            /* Latitude */
            @Query("filter[latitude]") filterlatitude: Float,
            /* Longitude */
            @Query("filter[longitude]") filterlongitude: Float,
            /* Type of location-based app */
            @Query("filter[appType]") filterappType: FilterappType? = null
        ): Call<LocationBasedAppsWithRefs>
    }

    /* Type of location-based app */
    enum class FilterappType(val value: String) {
        @SerializedName("fueling")
        @Json(name = "fueling")
        FUELING("fueling")
    }

    fun POIAPI.AppsAPI.checkForPaceApp(filterlatitude: Float, filterlongitude: Float, filterappType: FilterappType? = null, readTimeout: Long? = null): Call<LocationBasedAppsWithRefs> {
        val client = OkHttpClient.Builder()
                        .addNetworkInterceptor(InterceptorUtils.getInterceptor("application/vnd.api+json", "application/vnd.api+json", true))
                        .authenticator(InterceptorUtils.getAuthenticator())

        if (readTimeout != null) {
            client.readTimeout(readTimeout, TimeUnit.SECONDS)
        }

        val service: CheckForPaceAppService =
            Retrofit.Builder()
                .client(client.build())
                .baseUrl(POIAPI.baseUrl)
                .addConverterFactory(EnumConverterFactory())
                .addConverterFactory(
                    JsonApiConverterFactory.create(
                        Moshi.Builder()
                            .add(ResourceAdapterFactory.builder()
                                .build()
                            )
                            .add(Date::class.java, Rfc3339DateJsonAdapter().nullSafe())
                            .add(KotlinJsonAdapterFactory())
                            .build()
                    )
                )
                .addConverterFactory(
                    MoshiConverterFactory.create(
                        Moshi.Builder()
                            .add(Date::class.java, Rfc3339DateJsonAdapter().nullSafe())
                            .add(KotlinJsonAdapterFactory())
                            .build()
                    )
                )
                .build()
                .create(CheckForPaceAppService::class.java)    

        return service.checkForPaceApp(filterlatitude, filterlongitude, filterappType)
    }
}
