/*
 * PLEASE DO NOT EDIT!
 *
 * Generated by SwagGen with Kotlin template.
 * https://github.com/pace/SwagGen
 */

package cloud.pace.sdk.api.request.gasStations

import cloud.pace.sdk.api.API
import cloud.pace.sdk.api.model.*
import com.squareup.moshi.Moshi
import com.squareup.moshi.adapters.Rfc3339DateJsonAdapter
import moe.banana.jsonapi2.JsonApiConverterFactory
import moe.banana.jsonapi2.ResourceAdapterFactory
import okhttp3.OkHttpClient
import retrofit2.Call
import retrofit2.Retrofit
import retrofit2.http.*
import java.util.*
import cloud.pace.sdk.api.API.toIso8601
import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory

interface GetGasStationsService {

    /** There are two ways to search for gas stations in a geo location. You can use either one, or none, but not both ways.
To search inside a specific radius around a given longitude and latitude provide the following query parameters:
* latitude
* longitude
* radius
To search inside a bounding box provide the following query parameter:
* boundingBox
 **/
    @GET("/gas-stations")
    fun getGasStations(
        @Query("page[number]") pagenumber: Int? = null,
        @Query("page[size]") pagesize: Int? = null,
        @Query("filter[poiType]") filterpoiType: String? = null,
        @Query("filter[appType]") filterappType: List<String>? = null,
        @Query("filter[latitude]") filterlatitude: Float? = null,
        @Query("filter[longitude]") filterlongitude: Float? = null,
        @Query("filter[radius]") filterradius: Float? = null,
        @Query("filter[boundingBox]") filterboundingBox: List<Float>? = null,
        @Query("compile[openingHours]") compileopeningHours: Boolean? = null,
        @Query("filter[source]") filtersource: String? = null
    ): Call<GasStations>
}


private val service: GetGasStationsService by lazy {
    Retrofit.Builder()
        .client(OkHttpClient.Builder().addInterceptor {
            val builder = it.request()
                .newBuilder()
                .header("Accept", "application/vnd.api+json")
                .header("Content-Type", "application/vnd.api+json")
                .header("API-Key", API.apiKey)

            API.additionalHeaders.forEach { header ->
                builder.header(header.key, header.value)
            }

            it.proceed(builder.build())
        }.build())
        .baseUrl(API.baseUrl)
            .addConverterFactory(
                JsonApiConverterFactory.create(
                    Moshi.Builder().add(
                        ResourceAdapterFactory.builder()
                            .add(FuelPrice::class.java)
                            .add(LocationBasedApp::class.java)
                            .add(ReferenceStatus::class.java)
                            .build()
                    )
                        .add(KotlinJsonAdapterFactory())
                        .add(Date::class.java, Rfc3339DateJsonAdapter().nullSafe())
                        .build()
                )
            )
        .build()
        .create(GetGasStationsService::class.java)
}

fun API.GasStationsAPI.getGasStations(pagenumber: Int? = null, pagesize: Int? = null, filterpoiType: String? = null, filterappType: List<String>? = null, filterlatitude: Float? = null, filterlongitude: Float? = null, filterradius: Float? = null, filterboundingBox: List<Float>? = null, compileopeningHours: Boolean? = null, filtersource: String? = null): Call<GasStations> {
    return service.getGasStations(pagenumber, pagesize, filterpoiType, filterappType, filterlatitude, filterlongitude, filterradius, filterboundingBox, compileopeningHours, filtersource)
}


