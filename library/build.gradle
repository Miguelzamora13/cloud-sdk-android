apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.dokka'
apply from: 'publish.gradle'

android {
    compileSdkVersion rootProject.ext.compile_sdk_version

    defaultConfig {
        minSdkVersion rootProject.ext.min_sdk_version
        targetSdkVersion rootProject.ext.target_sdk_version
        versionCode rootProject.ext.build_number
        versionName rootProject.ext.version_name
        manifestPlaceholders = [pace_redirect_scheme: "\${pace_redirect_scheme}"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas")
            }
        }

        dokkaHtml {
            outputDirectory.set(new File(buildDir, 'dokka'))

            moduleName.set("PACECloudSDK")
            dokkaSourceSets {
                configureEach {
                    includeNonPublic.set(false)
                }
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8

        kotlinOptions.freeCompilerArgs += ['-module-name', "$group_id.$artifact_id"]
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // Android
    implementation "androidx.core:core-ktx:$core_ktx_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayout_version"
    implementation "androidx.preference:preference:$preference_version"
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.biometric:biometric:$biometric_version"
    implementation "androidx.browser:browser:$browser_version"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Google
    implementation "com.google.android.gms:play-services-location:$play_services_location_version"
    implementation "com.google.android.gms:play-services-maps:$play_services_maps_version"
    implementation "com.google.maps.android:android-maps-utils:$google_maps_utils_version"
    implementation "com.google.protobuf:protobuf-java:$protobuf_version"

    // Dependency injection
    api "org.koin:koin-android:$koin_version"
    implementation "org.koin:koin-android-scope:$koin_version"
    implementation "org.koin:koin-android-viewmodel:$koin_version"
    implementation "org.koin:koin-android-ext:$koin_version"

    // Networking
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava3:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    implementation "com.squareup.moshi:moshi-adapters:$moshi_version"
    implementation "moe.banana:moshi-jsonapi:$moshi_jsonapi_version"
    implementation "moe.banana:moshi-jsonapi-retrofit-converter:$moshi_jsonapi_version"
    implementation "com.google.code.gson:gson:$gson_version"
    implementation "io.reactivex.rxjava3:rxjava:$rxjava_version"
    implementation "io.reactivex.rxjava3:rxandroid:$rxandroid_version"

    // Others
    implementation "net.openid:appauth:$appauth_version"
    implementation "dev.turingcomplete:kotlin-onetimepassword:$onetimepassword_version"
    implementation "commons-codec:commons-codec:$commons_codec_version"

    // Testing
    testImplementation "androidx.arch.core:core-testing:$test_arch_core_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$test_coroutines_version"
    testImplementation "org.koin:koin-test:$koin_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "org.mockito:mockito-inline:$mockito_version"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockito_kotlin_version"
    testImplementation "io.mockk:mockk:$mockk_version"
    testImplementation "org.robolectric:robolectric:$robolectric_version"
    androidTestImplementation "androidx.test:core:$test_core_version"
    androidTestImplementation "androidx.test:runner:$test_core_version"
    androidTestImplementation "androidx.test.ext:junit:$test_junit_version"
    api "androidx.room:room-testing:$room_version"
}
