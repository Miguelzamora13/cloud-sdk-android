apply plugin: 'maven-publish'
apply plugin: 'signing'

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    group = 'jar'
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

configurations {
    javadocDeps
}

group = rootProject.ext.group_id
version = rootProject.ext.version_name

ext["signing.keyId"] = properties.get("signingKeyId")
ext["signing.password"] = properties.get("signingPassword")
ext["signing.secretKeyRingFile"] = properties.get("signingSecretKeyRingFile")
ext["ossrhUsername"] = properties.get("ossrhUsername")
ext["ossrhPassword"] = properties.get("ossrhPassword")
ext["sonatypeStagingProfileId"] = properties.get("sonatypeStagingProfileId")

publishing {
    publications {
        debug(MavenPublication) {
            groupId rootProject.ext.group_id
            artifactId rootProject.ext.artifact_id
            version rootProject.ext.version_name

            artifact("$buildDir/outputs/aar/${project.getName()}-debug.aar")
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'PACE Cloud SDK Android'
                description = 'PACE Cloud SDK is a client SDK that allows your app to easily connect to PACE\'s Connected Fueling. The SDK consists of the IDKit to manage the OpenID (OID) authorization and general session flow with its token handling. It also consists of the AppKit, with which you can fetch and display location based apps, apps by URL or ID. Furthermore it contains the POIKit, which allows you to fetch Point of Interests (e.g. gas stations), request routes and search for locations.'
                url = 'https://github.com/pace/cloud-sdk-android'
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'https://github.com/pace/cloud-sdk-android/blob/master/LICENSE.md'
                    }
                }
                developers {
                    developer {
                        name = 'PACE Telematics GmbH'
                        email = 'android-dev@pace.car'
                        organization = 'PACE Telematics GmbH'
                        organizationUrl = 'https://www.pace.car'
                    }
                }
                scm {
                    connection = 'scm:git:github.com/pace/cloud-sdk-android.git'
                    developerConnection = 'scm:git:ssh://github.com/pace/cloud-sdk-android.git'
                    url = 'https://github.com/pace/cloud-sdk-android/tree/master'
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        if (it.name != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
        release(MavenPublication) {
            groupId rootProject.ext.group_id
            artifactId rootProject.ext.artifact_id
            version rootProject.ext.version_name

            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'PACE Cloud SDK Android'
                description = 'PACE Cloud SDK is a client SDK that allows your app to easily connect to PACE\'s Connected Fueling. The SDK consists of the IDKit to manage the OpenID (OID) authorization and general session flow with its token handling. It also consists of the AppKit, with which you can fetch and display location based apps, apps by URL or ID. Furthermore it contains the POIKit, which allows you to fetch Point of Interests (e.g. gas stations), request routes and search for locations.'
                url = 'https://github.com/pace/cloud-sdk-android'
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'https://github.com/pace/cloud-sdk-android/blob/master/LICENSE.md'
                    }
                }
                developers {
                    developer {
                        name = 'PACE Telematics GmbH'
                        email = 'android-dev@pace.car'
                        organization = 'PACE Telematics GmbH'
                        organizationUrl = 'https://www.pace.car'
                    }
                }
                scm {
                    connection = 'scm:git:github.com/pace/cloud-sdk-android.git'
                    developerConnection = 'scm:git:ssh://github.com/pace/cloud-sdk-android.git'
                    url = 'https://github.com/pace/cloud-sdk-android/tree/master'
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        if (it.name != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "mavenCentral"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"

            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

nexusStaging {
    serverUrl = "https://s01.oss.sonatype.org/service/local/"
    packageGroup = rootProject.ext.group_id
    stagingProfileId = sonatypeStagingProfileId
    username = ossrhUsername
    password = ossrhPassword
}

signing {
    // Signing is only mandatory for release publications.
    // Publish to mavenLocal can be executed with the publishDebugPublicationToMavenLocal Gradle task (unsigned).
    sign publishing.publications.release
}
